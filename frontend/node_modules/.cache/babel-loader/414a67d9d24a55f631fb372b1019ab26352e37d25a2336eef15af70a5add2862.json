{"ast":null,"code":"import axios from \"axios\";\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\nimport { getAccessToken, getRefreshToken, getUser } from \"../hooks/user.actions\";\n\n//request interceptior\nconst axiosService = axios.create({\n  baseURL: \"http://localhost:8000\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n//get access token from local storage, and add to header of request\naxiosService.interceptors.request.use(async config => {\n  const {\n    access\n  } = JSON.parse(localStorage.getItem(\"auth\"));\n  config.headers.Authorization = `Bearer ${access}`;\n  return config;\n});\n\n//return resolved or rejected promise\naxiosService.interceptors.response.use(res => Promise.resolve(res), err => Promise.reject(err));\n\n//refresh function for failedrequest\nconst refreshAuthLogic = async failedRequest => createAuthRefreshInterceptor(axiosService, refreshAuthLogic);\nexport function fetcher(url) {\n  return axiosService.get(url).then(res => res.data);\n}\nexport default axiosService;","map":{"version":3,"names":["axios","createAuthRefreshInterceptor","getAccessToken","getRefreshToken","getUser","axiosService","create","baseURL","headers","interceptors","request","use","config","access","JSON","parse","localStorage","getItem","Authorization","response","res","Promise","resolve","err","reject","refreshAuthLogic","failedRequest","fetcher","url","get","then","data"],"sources":["C:/Users/cfarb/scheduler/frontend/src/helpers/axios.js"],"sourcesContent":["import axios from \"axios\";\r\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\r\nimport {\r\n    getAccessToken,\r\n    getRefreshToken,\r\n    getUser,\r\n  } from \"../hooks/user.actions\";\r\n\r\n\r\n//request interceptior\r\nconst axiosService = axios.create({\r\n    baseURL: \"http://localhost:8000\",\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n});\r\n\r\n//get access token from local storage, and add to header of request\r\naxiosService.interceptors.request.use(async (config) => {\r\n    const {access} = JSON.parse(localStorage.getItem(\"auth\"));\r\n    config.headers.Authorization = `Bearer ${access}`;\r\n    return config;\r\n});\r\n\r\n//return resolved or rejected promise\r\naxiosService.interceptors.response.use(\r\n    (res) => Promise.resolve(res),\r\n    (err) => Promise.reject(err),\r\n);\r\n\r\n//refresh function for failedrequest\r\nconst refreshAuthLogic = async (failedRequest) => \r\ncreateAuthRefreshInterceptor(axiosService,refreshAuthLogic);\r\nexport function fetcher(url) {\r\n    return axiosService.get(url).then((res) => res.data);\r\n}\r\n\r\nexport default axiosService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,4BAA4B,MAAM,oBAAoB;AAC7D,SACIC,cAAc,EACdC,eAAe,EACfC,OAAO,QACF,uBAAuB;;AAGhC;AACA,MAAMC,YAAY,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC9BC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAH,YAAY,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACpD,MAAM;IAACC;EAAM,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EACzDL,MAAM,CAACJ,OAAO,CAACU,aAAa,GAAI,UAASL,MAAO,EAAC;EACjD,OAAOD,MAAM;AACjB,CAAC,CAAC;;AAEF;AACAP,YAAY,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CACjCS,GAAG,IAAKC,OAAO,CAACC,OAAO,CAACF,GAAG,CAAC,EAC5BG,GAAG,IAAKF,OAAO,CAACG,MAAM,CAACD,GAAG,CAC/B,CAAC;;AAED;AACA,MAAME,gBAAgB,GAAG,MAAOC,aAAa,IAC7CzB,4BAA4B,CAACI,YAAY,EAACoB,gBAAgB,CAAC;AAC3D,OAAO,SAASE,OAAOA,CAACC,GAAG,EAAE;EACzB,OAAOvB,YAAY,CAACwB,GAAG,CAACD,GAAG,CAAC,CAACE,IAAI,CAAEV,GAAG,IAAKA,GAAG,CAACW,IAAI,CAAC;AACxD;AAEA,eAAe1B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}